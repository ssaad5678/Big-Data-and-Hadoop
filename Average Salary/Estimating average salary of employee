//Mapper Class
import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class SalaryMapper extends Mapper<LongWritable, Text, Text, LongWritable> {
 private final static Text departmentKey = new Text("Department");
 private LongWritable salary = new LongWritable();
 public void map(LongWritable key, Text value, Context context) throws
IOException, InterruptedException {
 String[] parts = value.toString().split(",");
 if (parts.length == 3) {
 try {
 long empSalary = Long.parseLong(parts[2]);
 salary.set(empSalary);
 context.write(departmentKey, salary);
 } catch (NumberFormatException e) {
 // Handle invalid salary values
 }
 }
 }
}
//Reducer Class
import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;
public class SalaryReducer extends Reducer<Text, LongWritable, Text, LongWritable> {
 private LongWritable result = new LongWritable();
 public void reduce(Text key, Iterable<LongWritable> values, Context context)
 throws IOException, InterruptedException {
 long sum = 0;
 long count = 0;
 for (LongWritable val : values) {
 sum += val.get();
 count++;
 }
 long average = sum / count;
 result.set(average);
 context.write(key, result);
 }
}
//Map Reduce Job
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class AverageSalaryCalculator {
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = Job.getInstance(conf, "Average Salary Calculator");
 job.setJarByClass(AverageSalaryCalculator.class);
 job.setMapperClass(SalaryMapper.class);
 job.setReducerClass(SalaryReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(LongWritable.class);
 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
}
